"")[as.numeric(evaluate[i]) + 1 ],
"and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
1], "\n") # print the results for i-th CIs
}
sum(evaluate == FALSE)/N # count and make a ratio
sum(evaluate.true == FALSE)/N # count and make a ratio
#Part 2:
#Plot the first 100 CIs for the unknown variance case
testing.n = 100
plot(5,6, ylim= c(1,testing.n), xlim=c(0, 10), type = "n", axes= F, xlab = "",
ylab = "") # making a blank graph
for (i in 1:testing.n){
lines(c(un[i,1],un[i,2]),c(i,i), col = c("blue", "green")[evaluate[i]+1])
} # putting each confidence intervals one at a time
abline(v = m, col = "red", lwd = 2) # setting parameter
N <- 10000 # number of iteration
n <- 100 # sample size
a <- 2
b <- 6
m <- (a+b)/2 # mean
s <- sqrt(((b-a)^2)/12) # SD
alpha <- 0.05 # (1-confidence level)
un <- nw <- matrix(NA, nrow =N, ncol =2) # 2 blank matrices
evaluate <- evaluate.true <- rep(FALSE, N) # 2 blank vectors
in.CI <- function(x){ (x[1]<=m & m<=x[2])}
# Define a function called in.CI. The input x is a 2-element vector,
# representing an interval. If m is within the interval, in.CI return TRUE,
# otherwise returns FALSE.
for (i in 1:N){ # loop starts
Sample <- runif(n, a, b) # generate uniform variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)* qnorm(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)* qnorm(alpha/2, 0, 1)*s/sqrt(n) )
# Calculate the i-th confidence interval for known SD
evaluate[i] <- in.CI(un[i,])
# m is contained in 1st CI when SD unknown?
evaluate.true[i] <- in.CI(nw[i,])
# m is contained in 2nd CI when SD known?
cat(i, ": Intervals (", round(un[i,], 2), ")", c("*",
"")[as.numeric(evaluate[i]) + 1 ],
"and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
1], "\n") # print the results for i-th CIs
}
sum(evaluate == FALSE)/N # count and make a ratio
sum(evaluate.true == FALSE)/N # count and make a ratio
#Part 2:
#Plot the first 100 CIs for the unknown variance case
testing.n = 100
plot(5,6, ylim= c(1,testing.n), xlim=c(0, 10), type = "n", axes= F, xlab = "",
ylab = "") # making a blank graph
for (i in 1:testing.n){
lines(c(un[i,1],un[i,2]),c(i,i), col = c("blue", "green")[evaluate[i]+1])
} # putting each confidence intervals one at a time
abline(v = m, col = "red", lwd = 2) # setting parameter
library(Lock5Data)
install.packages(Lock5Data)
install.packages("Lock5Data")
install.packages("Lock5Data")
library(Lock5Data)
data("SleepCaffeine")
View(SleepCaffeine)
View(SleepCaffeine)
View(SleepCaffeine)
View(SleepCaffeine)
exData <- read.table("ExerciseHours")
exData <- read.table(data("ExerciseData"))
library(Lock5Data)
install.packages("Lock5Data")
install.packages("Lock5Data")
library(Lock5Data)
exData <- read.table(data("ExerciseHours"))
data("ExerciseHours")
View(ExerciseHours)
View(ExerciseHours)
exData <- read.table(data("ExerciseHours"))
View(ExerciseHours)
View(ExerciseHours)
View(ExerciseHours)
View(ExerciseHours)
View(ExerciseHours)
ExerciseHours[2,2]
ExerciseHours[0,]
ExerciseHours[,0]
ExerciseHour[,1]
ExerciseHours[,1]
data("SleepCaffeine")
View(SleepCaffeine)
SleepCaffeine[,1]
SleepCaffeine[,2]
yearData <- ExerciseHour[,1]
yearData <- ExerciseHours[,1]
hist?
?hist
?hist
hist(yearData, prob=T)
exerciseData <- ExerciseHours[,5]
hist(exerciseData, prob=T)
pulseData <- ExerciseHours[, 7]
hist(pulseData, prob=T)
pulseData
exerciseData <- ExerciseHours[,4]
pulseData <- ExerciseHours[, 6]
hist(exerciseData, prob=T)
hist(pulseData, prob=T)
hist(exerciseData, prob=T, freq=TRUE,
main="Histogram of Exercise Hours", xlab="Exercise Hours per week", ylab="Count")
hist(exerciseData, freq=TRUE,
main="Histogram of Exercise Hours", xlab="Exercise Hours per week", ylab="Count")
sumExerciseHour <- colSums(exerciseData[,4])
sumExerciseHour <- colSums(exerciseData)
sumExerciseHour <- colSums(ExerciseHours)
sum(exerciseData)
sum(exerciseData)/count(exerciseData)
sum(exerciseData)/50
N <- 50
meanData <- sum(exerciseData)/N
# An empty matrix to store squared differences (x_i - x)^2
diffSqr <- matrix(data = NA, nrow = N, ncol = 1)
for(i in 1:N) {
diffSqr[i, 1] <- (ExerciseHours[i, 4] - meanData)^2
}
diffSqr
meanData
Stdev <- sqrt((sum(diffSqr)/(N-1)))
Stdev
tValue <- 2.021
upperLim <- meanData + tValue*Stdev/sqrt(N)
lowerLim <- meanData - tValue*Stdev/sqrt(N)
tObs <- (meanData - 5)/(Stdev - sqrt(N))
SleepCaffeine
SleepCaffeine[2,1:12]
wordMemorized <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:13) {
wordMemorized[i, 0] <- SleepCaffeine[i,2]
}
wordMemorized <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:13) {
wordMemorized[i, 1] <- SleepCaffeine[i,2]
}
SleepCaffeine[,2]
wordMemorized <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:12) {
wordMemorized[i, 0] <- SleepCaffeine[i,2]
}
wordMemorized
wordMemorized <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:13) {
wordMemorized[i, 1] <- SleepCaffeine[i,2]
}
wordMemorized <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:12) {
wordMemorized[i, 1] <- SleepCaffeine[i,2]
}
wordMemorized <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:12) {
wordMemorized[i, 1] <- SleepCaffeine[i,2]
}
for(i in 13:24) {
wordMemorized[i, 2] <- SleepCaffeine[i,2]
}
wordMemorized
for(i in 13:24) {
wordMemorized[i-12, 2] <- SleepCaffeine[i,2]
}
wordMemorized
wordMemorized[,1]
wordMemorized[,2]
hist(wordMemorized[,1], freq=TRUE,
main="Histogram of Words Recalled - Sleep Group", xlab="Words Recalled", ylab="Count")
hist(wordMemorized[,2], freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count")
hist(wordMemorized[,2], freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", ylim=22)
hist(wordMemorized[,2], freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", ylim=6:22)
hist(wordMemorized[,2], freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", ylim=range(6,22))
hist(wordMemorized[,2], freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", xlim=range(6,22))
hist(wordMemorized[,2], freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", xlim=range(6,18))
hist(wordMemorized[,2], freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", xlim=range(4,24))
hist(wordMemorized[,2], freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", xlim=range(6,22))
hist(wordMemorized[,2], breaks=8,freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", xlim=range(6,22))
hist(wordMemorized[,2], breaks=2,freq=TRUE,
main="Histogram of Words Recalled - Ceffeine Group", xlab="Words Recalled", ylab="Count", xlim=range(6,22))
x <- rnorm(20); y <- rep(1:4, each=5); z <- y + rnorm(20)
cbind(x,y,z)
boxplot(x ~ y)
boxplot(z ~ y)
boxplot(SleepCaffeine[,2] ~ SleepCaffeine[,1])
median(wordMemorized[,1])
median(wordMemorized[,2])
#compute the mean value for two groups
meanSleep <- mean(wordMemorized[,1])
meanCaffeine <- meean(wordMemorized[,2])
# An empty matrix to store squared differences (x_i - x)^2
diffSqr2 <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:12) {
diffSqr2[i, 1] <- (wordMemorized[i, 1] - meanSleep)^2
diffSqr2[i, 2] <- (wordMemorized[i, 2] - meanCaffeine)^2
}
# Standard deviation of population
StdevSleep <- sqrt((sum(diffSqr2[,1])/(12-1)))
StdevCaffeine <- sqrt((sum(diffSqr2[,2])/(12-1)))
>
#compute the mean value for two groups
meanSleep <- mean(wordMemorized[,1])
meanCaffeine <- mean(wordMemorized[,2])
# An empty matrix to store squared differences (x_i - x)^2
diffSqr2 <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:12) {
diffSqr2[i, 1] <- (wordMemorized[i, 1] - meanSleep)^2
diffSqr2[i, 2] <- (wordMemorized[i, 2] - meanCaffeine)^2
}
# Standard deviation of population
StdevSleep <- sqrt((sum(diffSqr2[,1])/(12-1)))
StdevCaffeine <- sqrt((sum(diffSqr2[,2])/(12-1)))
>
#compute the mean value for two groups
meanSleep <- mean(wordMemorized[,1])
meanCaffeine <- mean(wordMemorized[,2])
# An empty matrix to store squared differences (x_i - x)^2
diffSqr2 <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:12) {
diffSqr2[i, 1] <- (wordMemorized[i, 1] - meanSleep)^2
diffSqr2[i, 2] <- (wordMemorized[i, 2] - meanCaffeine)^2
}
# Standard deviation of population
StdevSleep <- sqrt((sum(diffSqr2[,1])/(12-1)))
StdevCaffeine <- sqrt((sum(diffSqr2[,2])/(12-1)))
>
#compute the mean value for two groups
meanSleep <- mean(wordMemorized[,1])
meanCaffeine <- mean(wordMemorized[,2])
# An empty matrix to store squared differences (x_i - x)^2
diffSqr2 <- matrix(data = NA, nrow = 12, ncol = 2)
for(i in 1:12) {
diffSqr2[i, 1] <- (wordMemorized[i, 1] - meanSleep)^2
diffSqr2[i, 2] <- (wordMemorized[i, 2] - meanCaffeine)^2
}
# Standard deviation of population
StdevSleep <- sqrt((sum(diffSqr2[,1])/(12-1)))
StdevCaffeine <- sqrt((sum(diffSqr2[,2])/(12-1)))
read.table("HockeyData.txt")
read.table("HockeyData.rtf")
read.table("cd desktop/HockeyData.txt")
read.table("desktop/HockeyData.txt")
read.table("desktop/HockeyData.txt")
read.table("desktop/HockeyData.txt")
read.table("desktop/HockeyData.txt")
read.table("desktop/HockeyData.txt")
library(readr)
HockeyData <- read_csv("~/Desktop/HockeyData.txt")
View(HockeyData)
View(HockeyData)
library(readr)
HockeyData <- read_csv("~/Desktop/HockeyData.xlsx")
View(HockeyData)
library(readr)
HockeyData <- read_csv("~/Desktop/HockeyData.csv")
View(HockeyData)
median(exerciseData)
quantile(exerciseData)
sum(wordMemorized[,1])
attach(HockeyData)
names(HockeyData)
model = lm(heigh ~ team)
model = lm(heigh ~ as.factor(team))
fit = aov(model)
summary(fit)
u1 = mean(heigh[which(team == "Can")])
u2 = mean(heigh[which(team == "Oil")])
u3 = mean(heigh[which(team == "Fla")])
n1 = length(which(team == "Can"))
n2 = length(which(team == "Oil"))
n3 = length(which(team == "Fla"))
qt(1-(0.05/length(unique(team)))/2)
(length(team)-length(unique(team)))
qt((1-(0.05/length(unique(team)))/2), (length(team)-length(unique(team))))
min1vs2 <- (u1-u2) - tvalue*(sqrt((n1+n2)/(n1*n2)))*(sum(fit$residuals^2)/fit$df.residual)
max1vs2 <- (u1-u2) + tvalue*(sqrt((n1+n2)/(n1*n2)))*(sum(fit$residuals^2)/fit$df.residual)
min1vs2 <- (u1-u2) - tValue*(sqrt((n1+n2)/(n1*n2)))*(sum(fit$residuals^2)/fit$df.residual)
max1vs2 <- (u1-u2) + tValue*(sqrt((n1+n2)/(n1*n2)))*(sum(fit$residuals^2)/fit$df.residual)
#MSE - mean square error
mse <- sum(fit$residuals^2)/fit$df.residual
#SE(pooled) for can & oil, can & fla, oil $ fla
se12 <- sqrt(mse)*sqrt((n1+n2)/(n1*n2))
se13 <- sqrt(mse)*sqrt((n1+n3)/(n1*n3))
se23 <- sqrt(mse)*sqrt((n2+n3)/(n2*n3))
#number of groups
k <- length(unique(team))
#compute kC2
C <- choose(k,2)
#t-statistic
t <- qt((1-(0.05/(2*C))),(length(team-k)))
#95% CI for can & oil, can & fla, oil $ fla
c(u1-u2-t*se12, u1-u2+t*se12)
c(u1-u3-t*se13, u1-u3+t*se13)
c(u2-u3-t*se23, u2-u3+t*se23)
t <- qt((1-(0.05/(2*C))),(length(team)-k))
c(u1-u2-t*se12, u1-u2+t*se12)
c(u1-u3-t*se13, u1-u3+t*se13)
c(u2-u3-t*se23, u2-u3+t*se23)
library(readr)
HotDogData <- read_csv("~/Desktop/UBC 2016-2017/Term 2/STAT 251/Labs/Lab9/HotDogData.csv")
View(HotDogData)
library(readr)
HotDogData <- read_csv("~/Desktop/UBC 2016-2017/Term 2/STAT 251/Labs/Lab9/HotDogData.csv")
View(HotDogData)
attach(HotDogData)
names(HotDogData)
model = lm(Sodium ~ as.factor(Type))
fit = aov(model)
summary(fit)
View(HotDogData)
library(readr)
> HotDogData <- read_csv("~/Desktop/HotDogData.csv")
library(readr)HotDogData <- read_csv("~/Desktop/HotDogData.csv")
library(readr)
HotDogData <- read_csv("~/Desktop/HotDogData.csv")
View(HotDogData)
attach(HotDogData)
names(HotDogData)
model = lm(Sodium ~ as.factor(Type))
fit = aov(model)
summary(fit)
model = lm(Calories ~ as.factor(Type))
fit = aov(model)
summary(fit)
boxplot(Calories~Type)
boxplot(Sodium~Type)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
install.packages("shiny")
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
plot(density(xbar)) #Figure 4
library(shiny)
r = 2
r + 2
runApp('Desktop/Past Co-ops/ECCC/templateShiny.R')
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
runExample("01_hello")
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
runApp('Desktop/Past Co-ops/ECCC/NormalSlideBarDemo.R')
runApp('Desktop/Past Co-ops/ECCC/waitTimeHistDemo.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='chrisjing', token='3D8EE9123122E62FA38EBF49CB66A780', secret='xau2HshGF52GC8V3gpr7PVs9vvRqzJacoWHxZBqM')
rsconnect::setAccountInfo(name='chrisjing', token='3D8EE9123122E62FA38EBF49CB66A780', secret='xau2HshGF52GC8V3gpr7PVs9vvRqzJacoWHxZBqM')
install.packages('rsconnect')
devtools::install_github("rstudio/rsconnect")
rsconnect
setwd()
setwd()
setwd()
options(rsconnect.check.certificate = FALSE)
rsconnect::deployApp()
devtools::install_github("rstudio/rsconnect")
library(rsconnect)
install.packages('rsconnect')
library(rsconnect)
rsconnect
rsconnect::setAccountInfo(name='chrisjing', token='3D8EE9123122E62FA38EBF49CB66A780', secret='xau2HshGF52GC8V3gpr7PVs9vvRqzJacoWHxZBqM')
rsconnect::deployApp('path/to/your/app')
rsconnect::setAccountInfo(name="<ACCOUNT>", token="<TOKEN>", secret="<SECRET>")
library(rsconnect)
rsconnect::showLogs()
rsconnect::deployApp('path/to/your/app')
rsconnect
shiny::runApp('Desktop/Projects/PROJECT_CCSE')
runApp('Desktop/Projects/PROJECT_CCSE')
runApp('Desktop/Projects/PROJECT_CCSE')
runApp('Desktop/Projects/PROJECT_CCSE')
runApp('Desktop/Projects/PROJECT_CCSE')
runApp('Desktop/Projects/PROJECT_CCSE')
runApp('Desktop/Projects/PROJECT_CCSE')
runApp('Desktop/Projects/PROJECT_CCSE')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='chris-jing-9256',
token='8731330DE4EE0260404C9768CEDE1751',
secret='zFB5cVTjAJZ+orek/3IVKqUpnDPaICQZOEmlcbhf')
getwd()
setwd("~/Desktop/Projects/PROJECT_CCSE")
rsconnect::deployApp()
rsconnect::setAccountInfo(name='chris-jing-9256',
token='8731330DE4EE0260404C9768CEDE1751',
secret='zFB5cVTjAJZ+orek/3IVKqUpnDPaICQZOEmlcbhf')
rsconnect::deployApp()
rsconnect::deployApp()
getwd()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::setAccountInfo(name='chris-jing-9256',
token='8731330DE4EE0260404C9768CEDE1751',
secret='zFB5cVTjAJZ+orek/3IVKqUpnDPaICQZOEmlcbhf')
getwd()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
